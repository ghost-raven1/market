version: '3.8'

services:
  nginx:
    image: nginx:alpine
    ports:
      - "8080:8080"
    volumes:
      - ../frontend/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ../frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
#    ports:
#      - "80:8080"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/var/www/html
    environment:
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=market
      - DB_USERNAME=market_user
      - DB_PASSWORD=market_password
    ports:
      - "9000:9000"
    depends_on:
      - mysql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "artisan", "health:check"]
      interval: 30s
      timeout: 10s
      retries: 3

  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE=market
      - MYSQL_USER=market_user
      - MYSQL_PASSWORD=market_password
      - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 3

#  mysql-exporter:
#    image: prom/mysqld-exporter:latest
#    environment:
#      - DATA_SOURCE_NAME=market_user:market_password@(mysql:3306)/market
#    ports:
#      - "9104:9104"
#    depends_on:
#      mysql:
#        condition: service_healthy
#    networks:
#      - app-network
#    restart: unless-stopped

#  prometheus:
#    image: prom/prometheus:latest
#    volumes:
#      - ./docker/prometheus:/etc/prometheus:ro
#    ports:
#      - "9091:9090"
#    networks:
#      - app-network
#    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    restart: unless-stopped

#  node-exporter:
#    image: prom/node-exporter:latest
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
#    ports:
#      - "9101:9100"
#    networks:
#      - app-network
#    restart: unless-stopped

#  alertmanager:
#    image: prom/alertmanager:latest
#    volumes:
#      - ./docker/alertmanager:/etc/alertmanager:ro
#    ports:
#      - "9093:9093"
#    networks:
#      - app-network
#    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  grafana_data:
